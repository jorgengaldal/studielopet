---
// @ts-ignore
import Color from "color";

interface Props {
  bars: { value: number; color?: string }[];
  seriesConfig?: {
    color?: string;
    label?: string;
  }[];
}
const { bars, seriesConfig } = Astro.props;

const DEFAULT_COLOR = "#E21617";
const ANONYMIZE_THRESHOLD = 3;

let maxValue = Math.max(...bars.map((bar) => bar.value));
maxValue = maxValue < ANONYMIZE_THRESHOLD ? ANONYMIZE_THRESHOLD : maxValue;
---

<div class="h-full w-full flex flex-row justify-end items-center">
  {
    bars.map(({ value, color }, index) => {
      const colorObject = Color(
        color ?? (seriesConfig && (seriesConfig[index].color ?? DEFAULT_COLOR))
      );
      return (
        <div class="h-full w-full flex flex-col justify-end">
          {value == 0 ? (
            <div
              class="w-full relative flex flex-col items-center"
              style={`
                height: ${(ANONYMIZE_THRESHOLD / maxValue) * 100}%; 
                background: repeating-linear-gradient(
                  -45deg,
                  ${colorObject.lighten(0.7).desaturate(0.5)},
                  ${colorObject.lighten(0.7).desaturate(0.5)} 4px,
                  ${colorObject.lighten(0.4).desaturate(0.5)} 4px,
                  ${colorObject.lighten(0.4).desaturate(0.5)} 8px
                );
                border: 2px solid ${color}
                `}
            >
              <p class="absolute -top-5 text-sm italic font-thin">{`<${ANONYMIZE_THRESHOLD}`}</p>
            </div>
          ) : (
            <div
              class="w-full relative flex flex-col items-center"
              style={
                "height: " +
                (value / maxValue) * 100 +
                "%; " +
                "background-color: " +
                color
              }
            >
              <p class="absolute -top-5 text-sm italic font-thin">{value}</p>
            </div>
          )}
        </div>
      );
    })
  }
</div>
